{"version":3,"file":"static/webpack/static/development/pages/index.js.392bac937b78c7f77455.hot-update.js","sources":["webpack:///./components/DonationForm.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport {\n  FormField,\n  TextInputField,\n  Autocomplete,\n  TextInput,\n  Checkbox,\n  Button,\n  Heading,\n  Combobox\n} from \"evergreen-ui\";\nimport styled from \"styled-components\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { Query } from \"react-apollo\";\nimport _ from \"underscore\";\n\nconst Styles = styled.div`\n  background-color: white;\n  padding: 2rem 5rem;\n`;\n\nconst ALL_CATS_QUERY = gql`\n  query ALL_CATS_QUERY {\n    allCats {\n      id\n      name\n      image\n      iucnStatus\n    }\n  }\n`;\n\nconst CREATE_DONATION_MUTATION = gql`\n  mutation CREATE_DONATION_MUTATION(\n    $amount: Float!\n    $email: String!\n    $token: String!\n    $cat: Integer!\n  ) {\n    createDonation(\n      amount: $amount\n      email: $email\n      stripetoken: $token\n      cat: $cat\n    ) {\n      id\n    }\n  }\n`;\n\nclass DonationForm extends Component {\n  state = {\n    email: \"\",\n    updates: false,\n    gift: this.props.amount || null,\n    allocation: \"\"\n  };\n\n  saveToState = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  onToken = async (res, createDonation) => {\n    NProgress.start();\n    const donation = await createOrder({\n      variables: {\n        amount: this.state.gift,\n        token: res.id,\n        email: this.state.email,\n        cat: this.state.cat\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n    Router.push({\n      pathname: \"/thankyou\"\n    });\n  };\n\n  render() {\n    return (\n      <Query query={ALL_CATS_QUERY}>\n        {({ data }) => {\n          const catsName = _.pluck(data.allCats, \"name\");\n          let cat = _.where(data.allCats, { name: this.state.allocation })[0];\n          let image = cat ? cat.image : \"/image/stripe.jpg\";\n          return (\n            <Styles>\n              <FormField>\n                <Heading size={500} marginTop=\"default\">\n                  Gift Amount *\n                </Heading>\n                <Autocomplete\n                  height={50}\n                  items={[25.0, 50.0, 100.0, 200.0, 500.0]}\n                  onChange={changedItem => this.setState({ gift: changedItem })}\n                  initialInputValue={this.state.gift}\n                >\n                  {props => {\n                    const {\n                      getInputProps,\n                      getRef,\n                      inputValue,\n                      openMenu\n                    } = props;\n                    return (\n                      <TextInput\n                        placeholder=\"Choose or Enter an Amount\"\n                        width={400}\n                        value={inputValue}\n                        innerRef={getRef}\n                        label=\"Gift Amount\"\n                        {...getInputProps({\n                          onFocus: () => {\n                            openMenu();\n                          }\n                        })}\n                      />\n                    );\n                  }}\n                </Autocomplete>\n                <Heading size={500} marginTop=\"default\">\n                  Allocation\n                </Heading>\n                <Combobox\n                  name=\"allocation\"\n                  openOnFocus\n                  width={400}\n                  items={[...catsName, \"All Cats\"]}\n                  onChange={selected => this.setState({ allocation: selected })}\n                  placeholder=\"Select a Cat\"\n                />\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                  <Checkbox\n                    name=\"updates\"\n                    checked={this.state.update}\n                    onChange={e => this.setState({ update: e.target.checked })}\n                  />\n                  <Heading size={500} marginTop={0} marginLeft={10}>\n                    Keep me updated on Free Spirits news\n                  </Heading>\n                </div>\n                {createDonation => (\n                  <StripeCheckout\n                    amount={this.state.gift * 100}\n                    name=\"Free Spirits\"\n                    description={`Donate to save wild cats`}\n                    image={image}\n                    stripeKey=\"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\"\n                    currency=\"AUD\"\n                    token={res => this.onToken(res)}\n                    bitcoin={true}\n                  >\n                    <Button\n                      height={50}\n                      marginTop={30}\n                      appearance=\"primary\"\n                      intent=\"success\"\n                    >\n                      Complete this Transaction\n                    </Button>\n                  </StripeCheckout>\n                )}\n              </FormField>\n            </Styles>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default DonationForm;\nexport { ALL_CATS_QUERY };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;AAWA;AACA;AAiBA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AAZA;AAEA;AAUA;AACA;AADA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAgBA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAHA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AAwBA;AAGA;;;;AAvHA;AACA;AAyHA;;;;;A","sourceRoot":""}