{"ast":null,"code":"import withApollo from 'next-with-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { endpoint, prodEndpoint } from '../config';\nimport { createHttpLink } from \"apollo-link-http\";\n\nfunction createClient({\n  headers\n}) {\n  return new ApolloClient({\n    connectToDevTools: true,\n    cache: new InMemoryCache(),\n    uri: true ? endpoint : prodEndpoint,\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          method: \"POST\",\n          credentials: 'include'\n        },\n        headers\n      });\n    }\n  });\n}\n\nexport default withApollo(createClient);","map":{"version":3,"sources":["/Users/jinz/Projects/project3/frontend/lib/withData.js"],"names":["withApollo","ApolloClient","InMemoryCache","endpoint","prodEndpoint","createHttpLink","createClient","headers","connectToDevTools","cache","uri","request","operation","setContext","fetchOptions","method","credentials"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;AACA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AACjC,SAAO,IAAIN,YAAJ,CAAiB;AACtBO,IAAAA,iBAAiB,EAAE,IADG;AAEtBC,IAAAA,KAAK,EAAE,IAAIP,aAAJ,EAFe;AAGtBQ,IAAAA,GAAG,EAAE,OAAyCP,QAAzC,GAAoDC,YAHnC;AAItBO,IAAAA,OAAO,EAAEC,SAAS,IAAI;AACpBA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,YAAY,EAAE;AACZC,UAAAA,MAAM,EAAE,MADI;AAEZC,UAAAA,WAAW,EAAE;AAFD,SADK;AAKnBT,QAAAA;AALmB,OAArB;AAOD;AAZqB,GAAjB,CAAP;AAeD;;AAED,eAAeP,UAAU,CAACM,YAAD,CAAzB","sourcesContent":["import withApollo from 'next-with-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { endpoint, prodEndpoint } from '../config';\nimport { createHttpLink } from \"apollo-link-http\";\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    connectToDevTools: true,\n    cache: new InMemoryCache(),\n    uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          method: \"POST\",\n          credentials: 'include',\n        },\n        headers,\n      });\n    },\n\n  });\n}\n\nexport default withApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}