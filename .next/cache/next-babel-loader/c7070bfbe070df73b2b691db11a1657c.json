{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jinz/Projects/project3/frontend/components/DonationForm.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from 'evergreen-ui';\nimport styled from 'styled-components';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Query } from 'react-apollo';\nimport _ from 'underscore';\nconst Styles = styled.div.withConfig({\n  displayName: \"DonationForm__Styles\",\n  componentId: \"sc-1a2kw3r-0\"\n})([\"background-color:\", \";padding:10rem 20rem 30rem 20rem;\"], props => props.theme.lightgrey);\nconst ALL_CATS_QUERY = gql`\n  query ALL_CATS_QUERY{\n    allCats{\n      id\n      name\n      image\n      iucnStatus\n    }\n  }\n`;\n\nclass DonationForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      email: '',\n      updates: false,\n      gift: 0,\n      allocation: \"\"\n    });\n\n    _defineProperty(this, \"saveToState\", e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Query, {\n      query: ALL_CATS_QUERY,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, ({\n      data\n    }) => {\n      const catsName = _.pluck(data.allCats, \"name\");\n\n      console.log(_.whereFind(data.allCats, {\n        name: this.state.allocation\n      }));\n      return __jsx(Styles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, __jsx(FormField, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, __jsx(Heading, {\n        size: 500,\n        marginTop: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Email *\"), __jsx(TextInputField, {\n        name: \"email\",\n        isInvalid: false,\n        inputWidth: 400,\n        placeholder: \"Enter your email\",\n        onChange: email => {\n          this.setState({\n            email: email\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), __jsx(Heading, {\n        size: 500,\n        marginTop: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Gift Amount *\"), __jsx(Autocomplete, {\n        height: 50,\n        onChange: this.saveToState,\n        items: [25, 50, 100, 200, 500],\n        onChange: changedItem => this.setState({\n          gift: changedItem\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, props => {\n        const {\n          getInputProps,\n          getRef,\n          inputValue,\n          openMenu\n        } = props;\n        return __jsx(TextInput, _extends({\n          placeholder: \"Choose or Enter an Amount\",\n          width: 400,\n          value: inputValue,\n          innerRef: getRef,\n          label: \"Gift Amount\"\n        }, getInputProps({\n          onFocus: () => {\n            openMenu();\n          }\n        }), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }));\n      }), __jsx(Heading, {\n        size: 500,\n        marginTop: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Allocation\"), __jsx(Combobox, {\n        name: \"allocation\",\n        openOnFocus: true,\n        width: 400,\n        items: [...catsName, \"All Cats\"],\n        onChange: selected => this.setState({\n          allocation: selected\n        }),\n        placeholder: \"Select a Cat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, __jsx(Checkbox, {\n        name: \"updates\",\n        checked: this.state.update,\n        onChange: e => this.setState({\n          update: e.target.checked\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), __jsx(Heading, {\n        size: 500,\n        marginTop: 0,\n        marginLeft: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Keep me updated on Free Spirits news\")), __jsx(StripeCheckout, {\n        amount: this.state.gift,\n        name: \"Free Spirits\",\n        description: `Donate to save wild cats`,\n        image: _.findWhere(data.allCats, {\n          name: this.state.allocation\n        }) || \"static/image/stripe.jpg\",\n        stripeKey: \"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\",\n        currency: \"AUD\",\n        email: this.state.email,\n        token: res => this.onToken(res, createOrder),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, __jsx(Button, {\n        height: 50,\n        marginTop: 30,\n        appearance: \"primary\",\n        intent: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Complete this Transaction\"))));\n    });\n  }\n\n}\n\nexport default DonationForm;","map":{"version":3,"sources":["/Users/jinz/Projects/project3/frontend/components/DonationForm.js"],"names":["React","Component","gql","FormField","TextInputField","Autocomplete","TextInput","Checkbox","Button","Heading","Combobox","styled","StripeCheckout","Query","_","Styles","div","props","theme","lightgrey","ALL_CATS_QUERY","DonationForm","email","updates","gift","allocation","e","setState","target","name","value","render","data","catsName","pluck","allCats","console","log","whereFind","state","saveToState","changedItem","getInputProps","getRef","inputValue","openMenu","onFocus","selected","display","alignItems","update","checked","findWhere","res","onToken","createOrder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from 'evergreen-ui';\nimport styled from 'styled-components';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Query } from 'react-apollo';\nimport _ from 'underscore';\n\nconst Styles = styled.div`\n    background-color: ${props => props.theme.lightgrey};\n    padding: 10rem 20rem 30rem 20rem;\n`;\n\n\nconst ALL_CATS_QUERY = gql`\n  query ALL_CATS_QUERY{\n    allCats{\n      id\n      name\n      image\n      iucnStatus\n    }\n  }\n`;\n\nclass DonationForm extends Component {\n    state = {\n        email: '',\n        updates: false,\n        gift: 0,\n        allocation: \"\"\n    };\n    saveToState = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n\n    render() {\n\n        return (\n            <Query query={ALL_CATS_QUERY}>\n                {({ data }) => {\n                    const catsName = _.pluck(data.allCats, \"name\")\n\n                    console.log(_.whereFind(data.allCats, { name: this.state.allocation }));\n\n                    return (\n                        <Styles>\n                            <FormField>\n                                <Heading size={500} marginTop=\"default\">Email *</Heading>\n                                <TextInputField\n                                    name=\"email\"\n                                    isInvalid={false}\n                                    inputWidth={400}\n                                    placeholder=\"Enter your email\"\n                                    onChange={email => { this.setState({ email: email }) }}\n                                />\n                                <Heading size={500} marginTop=\"default\">Gift Amount *</Heading>\n                                <Autocomplete height={50}\n                                    onChange={this.saveToState}\n                                    items={[25, 50, 100, 200, 500]}\n                                    onChange={changedItem => this.setState({ gift: changedItem })}\n                                >\n                                    {(props) => {\n                                        const { getInputProps, getRef, inputValue, openMenu } = props\n                                        return (\n                                            <TextInput\n                                                placeholder=\"Choose or Enter an Amount\"\n                                                width={400}\n                                                value={inputValue}\n                                                innerRef={getRef}\n                                                label=\"Gift Amount\"\n                                                {...getInputProps({\n                                                    onFocus: () => {\n                                                        openMenu()\n                                                    }\n                                                })}\n                                            />\n                                        )\n                                    }}\n                                </Autocomplete>\n                                <Heading size={500} marginTop=\"default\">Allocation</Heading>\n                                <Combobox\n                                    name=\"allocation\"\n                                    openOnFocus\n                                    width={400}\n                                    items={[...catsName, \"All Cats\"]}\n                                    onChange={selected => this.setState({ allocation: selected })}\n                                    placeholder=\"Select a Cat\"\n                                />\n                                <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                                    <Checkbox\n                                        name=\"updates\"\n                                        checked={this.state.update}\n                                        onChange={e => this.setState({ update: e.target.checked })}\n                                    />\n                                    <Heading size={500} marginTop={0} marginLeft={10} >Keep me updated on Free Spirits news</Heading>\n                                </div>\n                                <StripeCheckout\n                                    amount={this.state.gift}\n                                    name=\"Free Spirits\"\n                                    description={`Donate to save wild cats`}\n                                    image={_.findWhere(data.allCats, { name: this.state.allocation }) || \"static/image/stripe.jpg\"}\n                                    stripeKey=\"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\"\n                                    currency=\"AUD\"\n                                    email={this.state.email}\n                                    token={res => this.onToken(res, createOrder)}\n                                >\n                                    <Button height={50} marginTop={30} appearance=\"primary\" intent=\"success\" >Complete this Transaction</Button>\n                                </StripeCheckout>\n                            </FormField>\n\n\n                        </Styles >\n                    )\n                }}\n            </Query>\n\n        );\n    }\n}\n\nexport default DonationForm;\n"]},"metadata":{},"sourceType":"module"}