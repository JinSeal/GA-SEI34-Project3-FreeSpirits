{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jinz/Projects/project3/frontend/components/DonationForm.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CREATE_DONATION_MUTATION(\\n    $amount: Int!\\n    $email: String!\\n    $stripetoken: String!\\n    $cat: String!\\n  ) {\\n    createDonation(\\n      input: {\\n        amount: $amount\\n        email: $email\\n        stripetoken: $stripetoken\\n        cat: $cat\\n      }\\n    ) {\\n      ok\\n      donation {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_CATS_QUERY {\\n    allCats {\\n      id\\n      name\\n      image\\n      iucnStatus\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport Router from \"next/router\";\nimport gql from \"graphql-tag\";\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from \"evergreen-ui\";\nimport styled from \"styled-components\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { Query, Mutation } from \"react-apollo\";\nimport _ from \"underscore\";\nvar Styles = styled.div.withConfig({\n  displayName: \"DonationForm__Styles\",\n  componentId: \"d9hi8b-0\"\n})([\"background-color:white;padding:2rem 5rem;\"]);\nvar ALL_CATS_QUERY = gql(_templateObject());\nvar CREATE_DONATION_MUTATION = gql(_templateObject2());\n\nvar DonationForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DonationForm, _Component);\n\n  function DonationForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DonationForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DonationForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      email: \"\",\n      updates: false,\n      gift: _this.props.amount || 20,\n      allocation: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveToState\", function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToken\", function _callee(res, createDonation) {\n      var donation;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(createDonation({\n                variables: {\n                  amount: Number(_this.state.gift),\n                  stripetoken: res.id,\n                  email: res.email,\n                  cat: _this.state.allocation\n                }\n              }).then(function (res) {\n                Router.push({\n                  pathname: \"/thankyou\"\n                });\n              })[\"catch\"](function (err) {\n                alert(err.message);\n              }));\n\n            case 2:\n              donation = _context.sent;\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(DonationForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Query, {\n        query: ALL_CATS_QUERY,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, function (_ref) {\n        var data = _ref.data;\n\n        var catsName = _.pluck(data.allCats, \"name\");\n\n        var cat = _.where(data.allCats, {\n          name: _this2.state.allocation\n        })[0];\n\n        var image = cat ? cat.image : \"/image/stripe.jpg\";\n        return __jsx(Styles, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, __jsx(FormField, {\n          label: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, __jsx(Heading, {\n          size: 500,\n          marginTop: \"default\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, \"Email\"), __jsx(TextInput, {\n          placeholder: \"Enter your email\",\n          width: 400,\n          value: _this2.state.email,\n          label: \"email\",\n          onChange: function onChange(e) {\n            return _this2.setState({\n              email: e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }), __jsx(Heading, {\n          size: 500,\n          marginTop: \"default\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, \"Gift Amount *\"), __jsx(Autocomplete, {\n          height: 50,\n          items: [25.0, 50.0, 100.0, 200.0, 500.0],\n          onChange: function onChange(changedItem) {\n            return _this2.setState({\n              gift: changedItem\n            });\n          },\n          initialInputValue: _this2.state.gift.toString(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, function (props) {\n          var getInputProps = props.getInputProps,\n              getRef = props.getRef,\n              inputValue = props.inputValue,\n              openMenu = props.openMenu;\n          return __jsx(TextInput, _extends({\n            placeholder: \"Choose or Enter an Amount\",\n            width: 400,\n            value: inputValue,\n            innerRef: getRef,\n            label: \"Gift Amount\"\n          }, getInputProps({\n            onFocus: function onFocus() {\n              openMenu();\n            }\n          }), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }));\n        }), __jsx(Heading, {\n          size: 500,\n          marginTop: \"default\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, \"Allocation\"), __jsx(Combobox, {\n          name: \"allocation\",\n          openOnFocus: true,\n          width: 400,\n          items: [].concat(_toConsumableArray(catsName), [\"All Cats\"]),\n          onChange: function onChange(selected) {\n            return _this2.setState({\n              allocation: selected\n            });\n          },\n          placeholder: \"Select a Cat\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }), __jsx(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, __jsx(Checkbox, {\n          name: \"updates\",\n          checked: _this2.state.update,\n          onChange: function onChange(e) {\n            return _this2.setState({\n              update: e.target.checked\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }), __jsx(Heading, {\n          size: 500,\n          marginTop: 0,\n          marginLeft: 10,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, \"Keep me updated on Free Spirits news\")), __jsx(Mutation, {\n          mutation: CREATE_DONATION_MUTATION,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, function (createDonation) {\n          return __jsx(StripeCheckout, {\n            amount: _this2.state.gift * 100,\n            email: _this2.state.email,\n            name: \"Free Spirits\",\n            description: \"Donate to save wild cats\",\n            image: image,\n            stripeKey: \"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\",\n            currency: \"AUD\",\n            token: function token(res) {\n              return _this2.onToken(res, createDonation);\n            },\n            bitcoin: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            },\n            __self: this\n          }, __jsx(Button, {\n            height: 50,\n            marginTop: 30,\n            appearance: \"primary\",\n            intent: \"success\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 176\n            },\n            __self: this\n          }, \"Complete this Transaction\"));\n        })));\n      });\n    }\n  }]);\n\n  return DonationForm;\n}(Component);\n\nexport default DonationForm;\nexport { ALL_CATS_QUERY };","map":{"version":3,"sources":["/Users/jinz/Projects/project3/frontend/components/DonationForm.js"],"names":["React","Component","Router","gql","FormField","TextInputField","Autocomplete","TextInput","Checkbox","Button","Heading","Combobox","styled","StripeCheckout","Query","Mutation","_","Styles","div","ALL_CATS_QUERY","CREATE_DONATION_MUTATION","DonationForm","email","updates","gift","props","amount","allocation","e","setState","target","name","value","res","createDonation","variables","Number","state","stripetoken","id","cat","then","push","pathname","err","alert","message","donation","data","catsName","pluck","allCats","where","image","changedItem","toString","getInputProps","getRef","inputValue","openMenu","onFocus","selected","display","alignItems","update","checked","onToken"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Router from \"next/router\";\nimport gql from \"graphql-tag\";\nimport {\n  FormField,\n  TextInputField,\n  Autocomplete,\n  TextInput,\n  Checkbox,\n  Button,\n  Heading,\n  Combobox\n} from \"evergreen-ui\";\nimport styled from \"styled-components\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { Query, Mutation } from \"react-apollo\";\nimport _ from \"underscore\";\n\nconst Styles = styled.div`\n  background-color: white;\n  padding: 2rem 5rem;\n`;\n\nconst ALL_CATS_QUERY = gql`\n  query ALL_CATS_QUERY {\n    allCats {\n      id\n      name\n      image\n      iucnStatus\n    }\n  }\n`;\n\nconst CREATE_DONATION_MUTATION = gql`\n  mutation CREATE_DONATION_MUTATION(\n    $amount: Int!\n    $email: String!\n    $stripetoken: String!\n    $cat: String!\n  ) {\n    createDonation(\n      input: {\n        amount: $amount\n        email: $email\n        stripetoken: $stripetoken\n        cat: $cat\n      }\n    ) {\n      ok\n      donation {\n        id\n      }\n    }\n  }\n`;\n\nclass DonationForm extends Component {\n  state = {\n    email: \"\",\n    updates: false,\n    gift: this.props.amount || 20,\n    allocation: \"\"\n  };\n\n  saveToState = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  onToken = async (res, createDonation) => {\n    const donation = await createDonation({\n      variables: {\n        amount: Number(this.state.gift),\n        stripetoken: res.id,\n        email: res.email,\n        cat: this.state.allocation\n      }\n    })\n      .then(res => {\n        Router.push({\n          pathname: \"/thankyou\"\n        });\n      })\n      .catch(err => {\n        alert(err.message);\n      });\n  };\n\n  render() {\n    return (\n      <Query query={ALL_CATS_QUERY}>\n        {({ data }) => {\n          const catsName = _.pluck(data.allCats, \"name\");\n          let cat = _.where(data.allCats, { name: this.state.allocation })[0];\n          let image = cat ? cat.image : \"/image/stripe.jpg\";\n          return (\n            <Styles>\n              <FormField label=\"\">\n                <Heading size={500} marginTop=\"default\">\n                  Email\n                </Heading>\n                <TextInput\n                  placeholder=\"Enter your email\"\n                  width={400}\n                  value={this.state.email}\n                  label=\"email\"\n                  onChange={e => this.setState({ email: e.target.value })}\n                />\n                <Heading size={500} marginTop=\"default\">\n                  Gift Amount *\n                </Heading>\n\n                <Autocomplete\n                  height={50}\n                  items={[25.0, 50.0, 100.0, 200.0, 500.0]}\n                  onChange={changedItem => this.setState({ gift: changedItem })}\n                  initialInputValue={this.state.gift.toString()}\n                >\n                  {props => {\n                    const {\n                      getInputProps,\n                      getRef,\n                      inputValue,\n                      openMenu\n                    } = props;\n                    return (\n                      <TextInput\n                        placeholder=\"Choose or Enter an Amount\"\n                        width={400}\n                        value={inputValue}\n                        innerRef={getRef}\n                        label=\"Gift Amount\"\n                        {...getInputProps({\n                          onFocus: () => {\n                            openMenu();\n                          }\n                        })}\n                      />\n                    );\n                  }}\n                </Autocomplete>\n                <Heading size={500} marginTop=\"default\">\n                  Allocation\n                </Heading>\n                <Combobox\n                  name=\"allocation\"\n                  openOnFocus\n                  width={400}\n                  items={[...catsName, \"All Cats\"]}\n                  onChange={selected => this.setState({ allocation: selected })}\n                  placeholder=\"Select a Cat\"\n                />\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                  <Checkbox\n                    name=\"updates\"\n                    checked={this.state.update}\n                    onChange={e => this.setState({ update: e.target.checked })}\n                  />\n                  <Heading size={500} marginTop={0} marginLeft={10}>\n                    Keep me updated on Free Spirits news\n                  </Heading>\n                </div>\n                <Mutation mutation={CREATE_DONATION_MUTATION}>\n                  {createDonation => (\n                    <StripeCheckout\n                      amount={this.state.gift * 100}\n                      email={this.state.email}\n                      name=\"Free Spirits\"\n                      description={`Donate to save wild cats`}\n                      image={image}\n                      stripeKey=\"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\"\n                      currency=\"AUD\"\n                      token={res => this.onToken(res, createDonation)}\n                      bitcoin={true}\n                    >\n                      <Button\n                        height={50}\n                        marginTop={30}\n                        appearance=\"primary\"\n                        intent=\"success\"\n                      >\n                        Complete this Transaction\n                      </Button>\n                    </StripeCheckout>\n                  )}\n                </Mutation>\n              </FormField>\n            </Styles>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default DonationForm;\nexport { ALL_CATS_QUERY };\n"]},"metadata":{},"sourceType":"module"}