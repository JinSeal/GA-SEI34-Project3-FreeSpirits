{"ast":null,"code":"import withApollo from 'next-with-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { endpoint, prodEndpoint } from '../config';\nimport { createHttpLink } from \"apollo-link-http\";\nvar httpLink = createHttpLink({\n  uri: 'http://localhost/GraphQL/public/graphql',\n  useGETForQueries: true\n});\n\nfunction createClient(_ref) {\n  var headers = _ref.headers;\n  return new ApolloClient({\n    link: httpLink,\n    connectToDevTools: true,\n    request: function request(operation) {\n      operation.setContext({\n        fetchOptions: {\n          credentials: 'include'\n        },\n        headers: headers\n      });\n    }\n  });\n}\n\n;\nexport default withApollo(createClient);","map":{"version":3,"sources":["/Users/jinz/Projects/project3/frontend/lib/withData.js"],"names":["withApollo","ApolloClient","endpoint","prodEndpoint","createHttpLink","httpLink","uri","useGETForQueries","createClient","headers","link","connectToDevTools","request","operation","setContext","fetchOptions","credentials"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAGA,IAAMC,QAAQ,GAAGD,cAAc,CAAC;AAC9BE,EAAAA,GAAG,EAAE,yCADyB;AAE9BC,EAAAA,gBAAgB,EAAE;AAFY,CAAD,CAA/B;;AAMA,SAASC,YAAT,OAAmC;AAAA,MAAXC,OAAW,QAAXA,OAAW;AACjC,SAAO,IAAIR,YAAJ,CAAiB;AACtBS,IAAAA,IAAI,EAAEL,QADgB;AAEtBM,IAAAA,iBAAiB,EAAE,IAFG;AAGtBC,IAAAA,OAAO,EAAE,iBAAAC,SAAS,EAAI;AACpBA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,YAAY,EAAE;AACZC,UAAAA,WAAW,EAAE;AADD,SADK;AAInBP,QAAAA,OAAO,EAAPA;AAJmB,OAArB;AAMD;AAVqB,GAAjB,CAAP;AAaD;;AAAA;AAGD,eAAeT,UAAU,CAACQ,YAAD,CAAzB","sourcesContent":["import withApollo from 'next-with-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { endpoint, prodEndpoint } from '../config';\nimport { createHttpLink } from \"apollo-link-http\";\n\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost/GraphQL/public/graphql',\n  useGETForQueries: true\n})\n\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    link: httpLink,\n    connectToDevTools: true,\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: 'include',\n        },\n        headers,\n      });\n    }\n  })\n\n};\n\n\nexport default withApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}