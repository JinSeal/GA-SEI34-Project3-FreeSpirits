{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from 'evergreen-ui';\nimport styled from 'styled-components';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Query } from 'react-apollo';\nimport _ from 'underscore';\nconst Styles = styled.div.withConfig({\n  displayName: \"DonationForm__Styles\",\n  componentId: \"d9hi8b-0\"\n})([\"background-color:white;padding:2rem 5rem;\"]);\nconst ALL_CATS_QUERY = gql`\n  query ALL_CATS_QUERY{\n    allCats{\n      id\n      name\n      image\n      iucnStatus\n    }\n  }\n`; // const CREATE_ORDER_MUTATION = gql`\n//   mutation createOrder($token: String!) {\n//     createOrder(token: $token) {\n//       id\n//       charge\n//       total\n//       items {\n//         id\n//         title\n//       }\n//     }\n//   }\n// `;\n\nclass DonationForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      email: '',\n      updates: false,\n      gift: this.props.amount || null,\n      allocation: \"\"\n    });\n\n    _defineProperty(this, \"saveToState\", e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"onToken\", async (res, createOrder) => {\n      NProgress.start();\n      await createDonation({\n        variables: {\n          token: res.id\n        }\n      }).catch(err => {\n        alert(err.message);\n      });\n      Router.push({\n        pathname: '/thankyou'\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Query, {\n      query: ALL_CATS_QUERY\n    }, ({\n      data\n    }) => {\n      const catsName = _.pluck(data.allCats, \"name\");\n\n      let cat = _.where(data.allCats, {\n        name: this.state.allocation\n      })[0];\n\n      let image = cat ? cat.image : \"static/image/stripe.jpg\";\n      return __jsx(Styles, null, __jsx(FormField, null, __jsx(Heading, {\n        size: 500,\n        marginTop: \"default\"\n      }, \"Email *\"), __jsx(TextInputField, {\n        name: \"email\",\n        isInvalid: false,\n        inputWidth: 400,\n        placeholder: \"Enter your email\",\n        onChange: email => {\n          this.setState({\n            email: email\n          });\n        }\n      }), __jsx(Heading, {\n        size: 500,\n        marginTop: \"default\"\n      }, \"Gift Amount *\"), __jsx(Autocomplete, {\n        height: 50,\n        items: [25.00, 50.00, 100.00, 200.00, 500.00],\n        onChange: changedItem => this.setState({\n          gift: changedItem\n        }),\n        initialInputValue: this.state.gift\n      }, props => {\n        const {\n          getInputProps,\n          getRef,\n          inputValue,\n          openMenu\n        } = props;\n        return __jsx(TextInput, _extends({\n          placeholder: \"Choose or Enter an Amount\",\n          width: 400,\n          value: inputValue,\n          innerRef: getRef,\n          label: \"Gift Amount\"\n        }, getInputProps({\n          onFocus: () => {\n            openMenu();\n          }\n        })));\n      }), __jsx(Heading, {\n        size: 500,\n        marginTop: \"default\"\n      }, \"Allocation\"), __jsx(Combobox, {\n        name: \"allocation\",\n        openOnFocus: true,\n        width: 400,\n        items: [...catsName, \"All Cats\"],\n        onChange: selected => this.setState({\n          allocation: selected\n        }),\n        placeholder: \"Select a Cat\"\n      }), __jsx(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\"\n        }\n      }, __jsx(Checkbox, {\n        name: \"updates\",\n        checked: this.state.update,\n        onChange: e => this.setState({\n          update: e.target.checked\n        })\n      }), __jsx(Heading, {\n        size: 500,\n        marginTop: 0,\n        marginLeft: 10\n      }, \"Keep me updated on Free Spirits news\")), __jsx(StripeCheckout, {\n        amount: this.state.gift * 100,\n        name: \"Free Spirits\",\n        description: `Donate to save wild cats`,\n        image: image,\n        stripeKey: \"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\",\n        currency: \"AUD\",\n        email: this.state.email,\n        token: res => this.onToken(res, createOrder),\n        bitcoin: true,\n        allowRememberMe: true\n      }, __jsx(Button, {\n        height: 50,\n        marginTop: 30,\n        appearance: \"primary\",\n        intent: \"success\"\n      }, \"Complete this Transaction\"))));\n    });\n  }\n\n}\n\nexport default DonationForm;\nexport { ALL_CATS_QUERY };","map":null,"metadata":{},"sourceType":"module"}