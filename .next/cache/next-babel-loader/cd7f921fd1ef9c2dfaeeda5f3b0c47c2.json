{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jinz/Projects/project3/frontend/components/DonationForm.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from \"evergreen-ui\";\nimport styled from \"styled-components\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { Query } from \"react-apollo\";\nimport _ from \"underscore\";\nconst Styles = styled.div.withConfig({\n  displayName: \"DonationForm__Styles\",\n  componentId: \"d9hi8b-0\"\n})([\"background-color:white;padding:2rem 5rem;\"]);\nconst ALL_CATS_QUERY = gql`\n  query ALL_CATS_QUERY {\n    allCats {\n      id\n      name\n      image\n      iucnStatus\n    }\n  }\n`;\n\nclass DonationForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      email: \"\",\n      updates: false,\n      gift: this.props.amount || null,\n      allocation: \"\"\n    });\n\n    _defineProperty(this, \"saveToState\", e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    });\n  }\n\n  // onToken = async res => {\n  //   NProgress.start();\n  //   await createDonation({\n  //     variables: {\n  //       token: res.id\n  //     }\n  //   }).catch(err => {\n  //     alert(err.message);\n  //   });\n  //   Router.push({\n  //     pathname: \"/thankyou\"\n  //   });\n  // };\n  render() {\n    return __jsx(Query, {\n      query: ALL_CATS_QUERY,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, ({\n      data\n    }) => {\n      const catsName = _.pluck(data.allCats, \"name\");\n\n      let cat = _.where(data.allCats, {\n        name: this.state.allocation\n      })[0];\n\n      let image = cat ? cat.image : \"/image/stripe.jpg\";\n      return __jsx(Styles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, __jsx(FormField, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, __jsx(Heading, {\n        size: 500,\n        marginTop: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Gift Amount *\"), __jsx(Autocomplete, {\n        height: 50,\n        items: [25.0, 50.0, 100.0, 200.0, 500.0],\n        onChange: changedItem => this.setState({\n          gift: changedItem\n        }),\n        initialInputValue: this.state.gift,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, props => {\n        const {\n          getInputProps,\n          getRef,\n          inputValue,\n          openMenu\n        } = props;\n        return __jsx(TextInput, _extends({\n          placeholder: \"Choose or Enter an Amount\",\n          width: 400,\n          value: inputValue,\n          innerRef: getRef,\n          label: \"Gift Amount\"\n        }, getInputProps({\n          onFocus: () => {\n            openMenu();\n          }\n        }), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }));\n      }), __jsx(Heading, {\n        size: 500,\n        marginTop: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Allocation\"), __jsx(Combobox, {\n        name: \"allocation\",\n        openOnFocus: true,\n        width: 400,\n        items: [...catsName, \"All Cats\"],\n        onChange: selected => this.setState({\n          allocation: selected\n        }),\n        placeholder: \"Select a Cat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, __jsx(Checkbox, {\n        name: \"updates\",\n        checked: this.state.update,\n        onChange: e => this.setState({\n          update: e.target.checked\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), __jsx(Heading, {\n        size: 500,\n        marginTop: 0,\n        marginLeft: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Keep me updated on Free Spirits news\")), __jsx(StripeCheckout, {\n        amount: this.state.gift * 100,\n        name: \"Free Spirits\",\n        description: `Donate to save wild cats`,\n        image: image,\n        stripeKey: \"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\",\n        currency: \"AUD\" // token={res => this.onToken(res)}\n        ,\n        bitcoin: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, __jsx(Button, {\n        height: 50,\n        marginTop: 30,\n        appearance: \"primary\",\n        intent: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Complete this Transaction\"))));\n    });\n  }\n\n}\n\nexport default DonationForm;\nexport { ALL_CATS_QUERY };","map":{"version":3,"sources":["/Users/jinz/Projects/project3/frontend/components/DonationForm.js"],"names":["React","Component","gql","FormField","TextInputField","Autocomplete","TextInput","Checkbox","Button","Heading","Combobox","styled","StripeCheckout","Query","_","Styles","div","ALL_CATS_QUERY","DonationForm","email","updates","gift","props","amount","allocation","e","setState","target","name","value","render","data","catsName","pluck","allCats","cat","where","state","image","changedItem","getInputProps","getRef","inputValue","openMenu","onFocus","selected","display","alignItems","update","checked"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport {\n  FormField,\n  TextInputField,\n  Autocomplete,\n  TextInput,\n  Checkbox,\n  Button,\n  Heading,\n  Combobox\n} from \"evergreen-ui\";\nimport styled from \"styled-components\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { Query } from \"react-apollo\";\nimport _ from \"underscore\";\n\nconst Styles = styled.div`\n  background-color: white;\n  padding: 2rem 5rem;\n`;\n\nconst ALL_CATS_QUERY = gql`\n  query ALL_CATS_QUERY {\n    allCats {\n      id\n      name\n      image\n      iucnStatus\n    }\n  }\n`;\n\nclass DonationForm extends Component {\n  state = {\n    email: \"\",\n    updates: false,\n    gift: this.props.amount || null,\n    allocation: \"\"\n  };\n\n  saveToState = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  // onToken = async res => {\n  //   NProgress.start();\n  //   await createDonation({\n  //     variables: {\n  //       token: res.id\n  //     }\n  //   }).catch(err => {\n  //     alert(err.message);\n  //   });\n  //   Router.push({\n  //     pathname: \"/thankyou\"\n  //   });\n  // };\n\n  render() {\n    return (\n      <Query query={ALL_CATS_QUERY}>\n        {({ data }) => {\n          const catsName = _.pluck(data.allCats, \"name\");\n          let cat = _.where(data.allCats, { name: this.state.allocation })[0];\n          let image = cat ? cat.image : \"/image/stripe.jpg\";\n          return (\n            <Styles>\n              <FormField>\n                <Heading size={500} marginTop=\"default\">\n                  Gift Amount *\n                </Heading>\n                <Autocomplete\n                  height={50}\n                  items={[25.0, 50.0, 100.0, 200.0, 500.0]}\n                  onChange={changedItem => this.setState({ gift: changedItem })}\n                  initialInputValue={this.state.gift}\n                >\n                  {props => {\n                    const {\n                      getInputProps,\n                      getRef,\n                      inputValue,\n                      openMenu\n                    } = props;\n                    return (\n                      <TextInput\n                        placeholder=\"Choose or Enter an Amount\"\n                        width={400}\n                        value={inputValue}\n                        innerRef={getRef}\n                        label=\"Gift Amount\"\n                        {...getInputProps({\n                          onFocus: () => {\n                            openMenu();\n                          }\n                        })}\n                      />\n                    );\n                  }}\n                </Autocomplete>\n                <Heading size={500} marginTop=\"default\">\n                  Allocation\n                </Heading>\n                <Combobox\n                  name=\"allocation\"\n                  openOnFocus\n                  width={400}\n                  items={[...catsName, \"All Cats\"]}\n                  onChange={selected => this.setState({ allocation: selected })}\n                  placeholder=\"Select a Cat\"\n                />\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                  <Checkbox\n                    name=\"updates\"\n                    checked={this.state.update}\n                    onChange={e => this.setState({ update: e.target.checked })}\n                  />\n                  <Heading size={500} marginTop={0} marginLeft={10}>\n                    Keep me updated on Free Spirits news\n                  </Heading>\n                </div>\n                <StripeCheckout\n                  amount={this.state.gift * 100}\n                  name=\"Free Spirits\"\n                  description={`Donate to save wild cats`}\n                  image={image}\n                  stripeKey=\"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\"\n                  currency=\"AUD\"\n                  // token={res => this.onToken(res)}\n                  bitcoin={true}\n                >\n                  <Button\n                    height={50}\n                    marginTop={30}\n                    appearance=\"primary\"\n                    intent=\"success\"\n                  >\n                    Complete this Transaction\n                  </Button>\n                </StripeCheckout>\n              </FormField>\n            </Styles>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default DonationForm;\nexport { ALL_CATS_QUERY };\n"]},"metadata":{},"sourceType":"module"}