{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jinz/Projects/project3/frontend/components/DonationForm.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from 'evergreen-ui';\nimport styled from 'styled-components';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Query } from 'react-apollo';\nimport _ from 'underscore';\nconst Styles = styled.div.withConfig({\n  displayName: \"DonationForm__Styles\",\n  componentId: \"sc-1a2kw3r-0\"\n})([\"background-color:\", \";padding:10rem 20rem 30rem 20rem;\"], props => props.theme.lightgrey);\n\nclass DonationForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      email: '',\n      updates: false,\n      gift: 0,\n      allocation: \"\"\n    });\n\n    _defineProperty(this, \"saveToState\", e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Styles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, __jsx(FormField, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, __jsx(Heading, {\n      size: 500,\n      marginTop: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Email *\"), __jsx(TextInputField, {\n      name: \"email\",\n      isInvalid: false,\n      inputWidth: 400,\n      placeholder: \"Enter your email\",\n      onChange: email => {\n        this.setState({\n          email: email\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), __jsx(Heading, {\n      size: 500,\n      marginTop: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Gift Amount *\"), __jsx(Autocomplete, {\n      height: 50,\n      onChange: this.saveToState,\n      items: [25, 50, 100, 200, 500],\n      onChange: changedItem => this.setState({\n        gift: changedItem\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, props => {\n      const {\n        getInputProps,\n        getRef,\n        inputValue,\n        openMenu\n      } = props;\n      return __jsx(TextInput, _extends({\n        placeholder: \"Choose or Enter an Amount\",\n        width: 400,\n        value: inputValue,\n        innerRef: getRef,\n        label: \"Gift Amount\"\n      }, getInputProps({\n        onFocus: () => {\n          openMenu();\n        }\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }));\n    }), __jsx(Heading, {\n      size: 500,\n      marginTop: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Allocation\"), __jsx(Combobox, {\n      name: \"allocation\",\n      openOnFocus: true,\n      width: 400,\n      items: [\"name\"],\n      onChange: selected => this.setState({\n        allocation: selected\n      }),\n      placeholder: \"Select a Cat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, __jsx(Checkbox, {\n      name: \"updates\",\n      checked: this.state.update,\n      onChange: e => this.setState({\n        update: e.target.checked\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), __jsx(Heading, {\n      size: 500,\n      marginTop: 0,\n      marginLeft: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Keep me updated on Free Spirits news\")), __jsx(StripeCheckout, {\n      amount: this.state.gift,\n      name: \"Free Spirits\",\n      description: `Donate to save wild cats`,\n      image: '',\n      stripeKey: \"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\",\n      currency: \"AUD\",\n      email: this.state.email,\n      token: res => this.onToken(res, createOrder),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, __jsx(Button, {\n      height: 50,\n      marginTop: 30,\n      appearance: \"primary\",\n      intent: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Complete this Transaction\"))));\n  }\n\n}\n\nexport default DonationForm;","map":{"version":3,"sources":["/Users/jinz/Projects/project3/frontend/components/DonationForm.js"],"names":["React","Component","gql","FormField","TextInputField","Autocomplete","TextInput","Checkbox","Button","Heading","Combobox","styled","StripeCheckout","Query","_","Styles","div","props","theme","lightgrey","DonationForm","email","updates","gift","allocation","e","setState","target","name","value","render","saveToState","changedItem","getInputProps","getRef","inputValue","openMenu","onFocus","selected","display","alignItems","state","update","checked","res","onToken","createOrder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from 'evergreen-ui';\nimport styled from 'styled-components';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Query } from 'react-apollo';\nimport _ from 'underscore';\n\nconst Styles = styled.div`\n    background-color: ${props => props.theme.lightgrey};\n    padding: 10rem 20rem 30rem 20rem;\n`;\n\n\nclass DonationForm extends Component {\n    state = {\n        email: '',\n        updates: false,\n        gift: 0,\n        allocation: \"\"\n    };\n    saveToState = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n\n    render() {\n\n        return (\n            <Styles>\n                <FormField>\n                    <Heading size={500} marginTop=\"default\">Email *</Heading>\n                    <TextInputField\n                        name=\"email\"\n                        isInvalid={false}\n                        inputWidth={400}\n                        placeholder=\"Enter your email\"\n                        onChange={email => { this.setState({ email: email }) }}\n                    />\n                    <Heading size={500} marginTop=\"default\">Gift Amount *</Heading>\n                    <Autocomplete height={50}\n                        onChange={this.saveToState}\n                        items={[25, 50, 100, 200, 500]}\n                        onChange={changedItem => this.setState({ gift: changedItem })}\n                    >\n                        {(props) => {\n                            const { getInputProps, getRef, inputValue, openMenu } = props\n                            return (\n                                <TextInput\n                                    placeholder=\"Choose or Enter an Amount\"\n                                    width={400}\n                                    value={inputValue}\n                                    innerRef={getRef}\n                                    label=\"Gift Amount\"\n                                    {...getInputProps({\n                                        onFocus: () => {\n                                            openMenu()\n                                        }\n                                    })}\n                                />\n                            )\n                        }}\n                    </Autocomplete>\n                    <Heading size={500} marginTop=\"default\">Allocation</Heading>\n                    <Combobox\n                        name=\"allocation\"\n                        openOnFocus\n                        width={400}\n                        items={[\"name\"]}\n                        onChange={selected => this.setState({ allocation: selected })}\n                        placeholder=\"Select a Cat\"\n                    />\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                        <Checkbox\n                            name=\"updates\"\n                            checked={this.state.update}\n                            onChange={e => this.setState({ update: e.target.checked })}\n                        />\n                        <Heading size={500} marginTop={0} marginLeft={10} >Keep me updated on Free Spirits news</Heading>\n                    </div>\n                    <StripeCheckout\n                        amount={this.state.gift}\n                        name=\"Free Spirits\"\n                        description={`Donate to save wild cats`}\n                        image={''}\n                        stripeKey=\"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\"\n                        currency=\"AUD\"\n                        email={this.state.email}\n                        token={res => this.onToken(res, createOrder)}\n                    >\n                        <Button height={50} marginTop={30} appearance=\"primary\" intent=\"success\" >Complete this Transaction</Button>\n                    </StripeCheckout>\n                </FormField>\n\n\n            </Styles >\n        );\n    }\n}\n\nexport default DonationForm;\n"]},"metadata":{},"sourceType":"module"}