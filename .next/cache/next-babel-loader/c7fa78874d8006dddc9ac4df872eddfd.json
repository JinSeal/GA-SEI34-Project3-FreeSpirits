{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createDonation(\\n      $amount: Float! \\n      $email: String!\\n      $token: String!\\n      $cat: Integer!\\n      ) {\\n    createDonation(\\n      amount: $amount\\n      email: $email\\n      stripetoken: $token\\n      cat: $cat\\n      ) {\\n      id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_CATS_QUERY {\\n    allCats {\\n      id\\n      name\\n      image\\n      iucnStatus\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from \"evergreen-ui\";\nimport styled from \"styled-components\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { Query } from \"react-apollo\";\nimport _ from \"underscore\";\nvar Styles = styled.div.withConfig({\n  displayName: \"DonationForm__Styles\",\n  componentId: \"d9hi8b-0\"\n})([\"background-color:white;padding:2rem 5rem;\"]);\nvar ALL_CATS_QUERY = gql(_templateObject());\nvar CREATE_DONATION_MUTATION = gql(_templateObject2());\n\nvar DonationForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DonationForm, _Component);\n\n  function DonationForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DonationForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DonationForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      email: \"\",\n      updates: false,\n      gift: _this.props.amount || null,\n      allocation: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveToState\", function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToken\", function _callee(res, createDonation) {\n      var donation;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              NProgress.start(); // manually call the mutation once we have the stripe token\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(createOrder({\n                variables: {\n                  amount: _this.state.gift,\n                  token: res.id,\n                  email: _this.state.email,\n                  cat: _this.state.cat\n                }\n              })[\"catch\"](function (err) {\n                alert(err.message);\n              }));\n\n            case 3:\n              donation = _context.sent;\n              Router.push({\n                pathname: \"/thankyou\"\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(DonationForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Query, {\n        query: ALL_CATS_QUERY\n      }, function (_ref) {\n        var data = _ref.data;\n\n        var catsName = _.pluck(data.allCats, \"name\");\n\n        var cat = _.where(data.allCats, {\n          name: _this2.state.allocation\n        })[0];\n\n        var image = cat ? cat.image : \"/image/stripe.jpg\";\n        return __jsx(Styles, null, __jsx(FormField, null, __jsx(Heading, {\n          size: 500,\n          marginTop: \"default\"\n        }, \"Gift Amount *\"), __jsx(Autocomplete, {\n          height: 50,\n          items: [25.0, 50.0, 100.0, 200.0, 500.0],\n          onChange: function onChange(changedItem) {\n            return _this2.setState({\n              gift: changedItem\n            });\n          },\n          initialInputValue: _this2.state.gift\n        }, function (props) {\n          var getInputProps = props.getInputProps,\n              getRef = props.getRef,\n              inputValue = props.inputValue,\n              openMenu = props.openMenu;\n          return __jsx(TextInput, _extends({\n            placeholder: \"Choose or Enter an Amount\",\n            width: 400,\n            value: inputValue,\n            innerRef: getRef,\n            label: \"Gift Amount\"\n          }, getInputProps({\n            onFocus: function onFocus() {\n              openMenu();\n            }\n          })));\n        }), __jsx(Heading, {\n          size: 500,\n          marginTop: \"default\"\n        }, \"Allocation\"), __jsx(Combobox, {\n          name: \"allocation\",\n          openOnFocus: true,\n          width: 400,\n          items: [].concat(_toConsumableArray(catsName), [\"All Cats\"]),\n          onChange: function onChange(selected) {\n            return _this2.setState({\n              allocation: selected\n            });\n          },\n          placeholder: \"Select a Cat\"\n        }), __jsx(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          }\n        }, __jsx(Checkbox, {\n          name: \"updates\",\n          checked: _this2.state.update,\n          onChange: function onChange(e) {\n            return _this2.setState({\n              update: e.target.checked\n            });\n          }\n        }), __jsx(Heading, {\n          size: 500,\n          marginTop: 0,\n          marginLeft: 10\n        }, \"Keep me updated on Free Spirits news\")), function (createDonation) {\n          return __jsx(StripeCheckout, {\n            amount: _this2.state.gift * 100,\n            name: \"Free Spirits\",\n            description: \"Donate to save wild cats\",\n            image: image,\n            stripeKey: \"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\",\n            currency: \"AUD\",\n            token: function token(res) {\n              return _this2.onToken(res);\n            },\n            bitcoin: true\n          }, __jsx(Button, {\n            height: 50,\n            marginTop: 30,\n            appearance: \"primary\",\n            intent: \"success\"\n          }, \"Complete this Transaction\"));\n        }));\n      });\n    }\n  }]);\n\n  return DonationForm;\n}(Component);\n\nexport default DonationForm;\nexport { ALL_CATS_QUERY };","map":null,"metadata":{},"sourceType":"module"}