{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jinz/Projects/project3/frontend/components/DonationForm.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query CAT_NAME_IMG_QUERY {\\n        allCats {\\n            name\\n            image\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from 'evergreen-ui';\nimport styled from 'styled-components';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Query } from 'react-apollo';\nimport _ from 'underscore';\nvar Styles = styled.div.withConfig({\n  displayName: \"DonationForm__Styles\",\n  componentId: \"sc-1a2kw3r-0\"\n})([\"background-color:\", \";padding:10rem 20rem 30rem 20rem;\"], function (props) {\n  return props.theme.lightgrey;\n});\nvar CAT_NAME_IMG_QUERY = gql(_templateObject());\n\nvar DonationForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DonationForm, _Component);\n\n  function DonationForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DonationForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DonationForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      email: '',\n      updates: false,\n      gift: 0,\n      allocation: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveToState\", function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    });\n\n    return _this;\n  }\n\n  _createClass(DonationForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Query, {\n        query: CAT_NAME_IMG_QUERY,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, function (_ref) {\n        var _jsx;\n\n        var data = _ref.data;\n        console.log(data);\n\n        __jsx(Styles, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, __jsx(FormField, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, __jsx(Heading, {\n          size: 500,\n          marginTop: \"default\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, \"Email *\"), __jsx(TextInputField, {\n          name: \"email\",\n          isInvalid: false,\n          inputWidth: 400,\n          placeholder: \"Enter your email\",\n          onChange: function onChange(email) {\n            _this2.setState({\n              email: email\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }), __jsx(Heading, {\n          size: 500,\n          marginTop: \"default\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, \"Gift Amount *\"), __jsx(Autocomplete, (_jsx = {\n          height: 50,\n          onChange: _this2.saveToState,\n          items: [25, 50, 100, 200, 500]\n        }, _defineProperty(_jsx, \"onChange\", function onChange(changedItem) {\n          return _this2.setState({\n            gift: changedItem\n          });\n        }), _defineProperty(_jsx, \"__source\", {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        }), _defineProperty(_jsx, \"__self\", this), _jsx), function (props) {\n          var getInputProps = props.getInputProps,\n              getRef = props.getRef,\n              inputValue = props.inputValue,\n              openMenu = props.openMenu;\n          return __jsx(TextInput, _extends({\n            placeholder: \"Choose or Enter an Amount\",\n            width: 400,\n            value: inputValue,\n            innerRef: getRef,\n            label: \"Gift Amount\"\n          }, getInputProps({\n            onFocus: function onFocus() {\n              openMenu();\n            }\n          }), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }));\n        }), __jsx(Heading, {\n          size: 500,\n          marginTop: \"default\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, \"Allocation\"), __jsx(Combobox, {\n          name: \"allocation\",\n          openOnFocus: true,\n          width: 400,\n          items: [\"name\"],\n          onChange: function onChange(selected) {\n            return _this2.setState({\n              allocation: selected\n            });\n          },\n          placeholder: \"Select a Cat\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }), __jsx(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, __jsx(Checkbox, {\n          name: \"updates\",\n          checked: _this2.state.update,\n          onChange: function onChange(e) {\n            return _this2.setState({\n              update: e.target.checked\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }), __jsx(Heading, {\n          size: 500,\n          marginTop: 0,\n          marginLeft: 10,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, \"Keep me updated on Free Spirits news\")), __jsx(StripeCheckout, {\n          amount: _this2.state.gift,\n          name: \"Free Spirits\",\n          description: \"Donate to save wild cats\",\n          image: '',\n          stripeKey: \"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\",\n          currency: \"AUD\",\n          email: _this2.state.email,\n          token: function token(res) {\n            return _this2.onToken(res, createOrder);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, __jsx(Button, {\n          height: 50,\n          marginTop: 30,\n          appearance: \"primary\",\n          intent: \"success\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, \"Complete this Transaction\"))));\n      });\n    }\n  }]);\n\n  return DonationForm;\n}(Component);\n\nexport default DonationForm;","map":{"version":3,"sources":["/Users/jinz/Projects/project3/frontend/components/DonationForm.js"],"names":["React","Component","gql","FormField","TextInputField","Autocomplete","TextInput","Checkbox","Button","Heading","Combobox","styled","StripeCheckout","Query","_","Styles","div","props","theme","lightgrey","CAT_NAME_IMG_QUERY","DonationForm","email","updates","gift","allocation","e","setState","target","name","value","data","console","log","saveToState","changedItem","getInputProps","getRef","inputValue","openMenu","onFocus","selected","display","alignItems","state","update","checked","res","onToken","createOrder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from 'evergreen-ui';\nimport styled from 'styled-components';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Query } from 'react-apollo';\nimport _ from 'underscore';\n\nconst Styles = styled.div`\n    background-color: ${props => props.theme.lightgrey};\n    padding: 10rem 20rem 30rem 20rem;\n`;\n\nconst CAT_NAME_IMG_QUERY = gql`\n    query CAT_NAME_IMG_QUERY {\n        allCats {\n            name\n            image\n        }\n    }\n`;\n\nclass DonationForm extends Component {\n    state = {\n        email: '',\n        updates: false,\n        gift: 0,\n        allocation: \"\"\n    };\n    saveToState = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n\n    render() {\n        return (\n            <Query query={CAT_NAME_IMG_QUERY}>\n                {({ data }) => {\n                    console.log(data);\n\n\n                    <Styles>\n                        <FormField>\n                            <Heading size={500} marginTop=\"default\">Email *</Heading>\n                            <TextInputField\n                                name=\"email\"\n                                isInvalid={false}\n                                inputWidth={400}\n                                placeholder=\"Enter your email\"\n                                onChange={email => { this.setState({ email: email }) }}\n                            />\n                            <Heading size={500} marginTop=\"default\">Gift Amount *</Heading>\n                            <Autocomplete height={50}\n                                onChange={this.saveToState}\n                                items={[25, 50, 100, 200, 500]}\n                                onChange={changedItem => this.setState({ gift: changedItem })}\n                            >\n                                {(props) => {\n                                    const { getInputProps, getRef, inputValue, openMenu } = props\n                                    return (\n                                        <TextInput\n                                            placeholder=\"Choose or Enter an Amount\"\n                                            width={400}\n                                            value={inputValue}\n                                            innerRef={getRef}\n                                            label=\"Gift Amount\"\n                                            {...getInputProps({\n                                                onFocus: () => {\n                                                    openMenu()\n                                                }\n                                            })}\n                                        />\n                                    )\n                                }}\n                            </Autocomplete>\n                            <Heading size={500} marginTop=\"default\">Allocation</Heading>\n                            <Combobox\n                                name=\"allocation\"\n                                openOnFocus\n                                width={400}\n                                items={[\"name\"]}\n                                onChange={selected => this.setState({ allocation: selected })}\n                                placeholder=\"Select a Cat\"\n                            />\n                            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                                <Checkbox\n                                    name=\"updates\"\n                                    checked={this.state.update}\n                                    onChange={e => this.setState({ update: e.target.checked })}\n                                />\n                                <Heading size={500} marginTop={0} marginLeft={10} >Keep me updated on Free Spirits news</Heading>\n                            </div>\n                            <StripeCheckout\n                                amount={this.state.gift}\n                                name=\"Free Spirits\"\n                                description={`Donate to save wild cats`}\n                                image={''}\n                                stripeKey=\"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\"\n                                currency=\"AUD\"\n                                email={this.state.email}\n                                token={res => this.onToken(res, createOrder)}\n                            >\n                                <Button height={50} marginTop={30} appearance=\"primary\" intent=\"success\" >Complete this Transaction</Button>\n                            </StripeCheckout>\n                        </FormField>\n\n\n                    </Styles >\n                }}\n            </Query>\n        );\n    }\n}\n\nexport default DonationForm;\n"]},"metadata":{},"sourceType":"module"}