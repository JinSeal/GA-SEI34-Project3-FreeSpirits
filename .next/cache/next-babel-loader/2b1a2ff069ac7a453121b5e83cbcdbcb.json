{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jinz/Projects/project3/frontend/components/DonationForm.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        allCats {\\n          id\\n          name\\n          image\\n        }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from 'evergreen-ui';\nimport styled from 'styled-components';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Query } from 'react-apollo';\nimport _ from 'underscore';\nvar Styles = styled.div.withConfig({\n  displayName: \"DonationForm__Styles\",\n  componentId: \"sc-1a2kw3r-0\"\n})([\"background-color:\", \";padding:10rem 20rem 30rem 20rem;\"], function (props) {\n  return props.theme.lightgrey;\n});\nvar cats = client.readFragment({\n  fragment: gql(_templateObject())\n});\n\nvar DonationForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DonationForm, _Component);\n\n  function DonationForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DonationForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DonationForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      email: '',\n      updates: false,\n      gift: 0,\n      allocation: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveToState\", function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    });\n\n    return _this;\n  }\n\n  _createClass(DonationForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _jsx;\n\n      console.log(cats);\n      return __jsx(Styles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, __jsx(FormField, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, __jsx(Heading, {\n        size: 500,\n        marginTop: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Email *\"), __jsx(TextInputField, {\n        name: \"email\",\n        isInvalid: false,\n        inputWidth: 400,\n        placeholder: \"Enter your email\",\n        onChange: function onChange(email) {\n          _this2.setState({\n            email: email\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), __jsx(Heading, {\n        size: 500,\n        marginTop: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Gift Amount *\"), __jsx(Autocomplete, (_jsx = {\n        height: 50,\n        onChange: this.saveToState,\n        items: [25, 50, 100, 200, 500]\n      }, _defineProperty(_jsx, \"onChange\", function onChange(changedItem) {\n        return _this2.setState({\n          gift: changedItem\n        });\n      }), _defineProperty(_jsx, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      }), _defineProperty(_jsx, \"__self\", this), _jsx), function (props) {\n        var getInputProps = props.getInputProps,\n            getRef = props.getRef,\n            inputValue = props.inputValue,\n            openMenu = props.openMenu;\n        return __jsx(TextInput, _extends({\n          placeholder: \"Choose or Enter an Amount\",\n          width: 400,\n          value: inputValue,\n          innerRef: getRef,\n          label: \"Gift Amount\"\n        }, getInputProps({\n          onFocus: function onFocus() {\n            openMenu();\n          }\n        }), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }));\n      }), __jsx(Heading, {\n        size: 500,\n        marginTop: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Allocation\"), __jsx(Combobox, {\n        name: \"allocation\",\n        openOnFocus: true,\n        width: 400,\n        items: [\"name\"],\n        onChange: function onChange(selected) {\n          return _this2.setState({\n            allocation: selected\n          });\n        },\n        placeholder: \"Select a Cat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, __jsx(Checkbox, {\n        name: \"updates\",\n        checked: this.state.update,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            update: e.target.checked\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), __jsx(Heading, {\n        size: 500,\n        marginTop: 0,\n        marginLeft: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Keep me updated on Free Spirits news\")), __jsx(StripeCheckout, {\n        amount: this.state.gift,\n        name: \"Free Spirits\",\n        description: \"Donate to save wild cats\",\n        image: '',\n        stripeKey: \"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\",\n        currency: \"AUD\",\n        email: this.state.email,\n        token: function token(res) {\n          return _this2.onToken(res, createOrder);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, __jsx(Button, {\n        height: 50,\n        marginTop: 30,\n        appearance: \"primary\",\n        intent: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Complete this Transaction\"))));\n    }\n  }]);\n\n  return DonationForm;\n}(Component);\n\nexport default DonationForm;","map":{"version":3,"sources":["/Users/jinz/Projects/project3/frontend/components/DonationForm.js"],"names":["React","Component","gql","FormField","TextInputField","Autocomplete","TextInput","Checkbox","Button","Heading","Combobox","styled","StripeCheckout","Query","_","Styles","div","props","theme","lightgrey","cats","client","readFragment","fragment","DonationForm","email","updates","gift","allocation","e","setState","target","name","value","console","log","saveToState","changedItem","getInputProps","getRef","inputValue","openMenu","onFocus","selected","display","alignItems","state","update","checked","res","onToken","createOrder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from 'evergreen-ui';\nimport styled from 'styled-components';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Query } from 'react-apollo';\nimport _ from 'underscore';\n\nconst Styles = styled.div`\n    background-color: ${props => props.theme.lightgrey};\n    padding: 10rem 20rem 30rem 20rem;\n`;\n\nconst cats = client.readFragment({\n    fragment: gql`\n        allCats {\n          id\n          name\n          image\n        }\n    `,\n});\n\n\n\nclass DonationForm extends Component {\n    state = {\n        email: '',\n        updates: false,\n        gift: 0,\n        allocation: \"\"\n    };\n    saveToState = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n\n    render() {\n        console.log(cats);\n\n        return (\n            <Styles>\n                <FormField>\n                    <Heading size={500} marginTop=\"default\">Email *</Heading>\n                    <TextInputField\n                        name=\"email\"\n                        isInvalid={false}\n                        inputWidth={400}\n                        placeholder=\"Enter your email\"\n                        onChange={email => { this.setState({ email: email }) }}\n                    />\n                    <Heading size={500} marginTop=\"default\">Gift Amount *</Heading>\n                    <Autocomplete height={50}\n                        onChange={this.saveToState}\n                        items={[25, 50, 100, 200, 500]}\n                        onChange={changedItem => this.setState({ gift: changedItem })}\n                    >\n                        {(props) => {\n                            const { getInputProps, getRef, inputValue, openMenu } = props\n                            return (\n                                <TextInput\n                                    placeholder=\"Choose or Enter an Amount\"\n                                    width={400}\n                                    value={inputValue}\n                                    innerRef={getRef}\n                                    label=\"Gift Amount\"\n                                    {...getInputProps({\n                                        onFocus: () => {\n                                            openMenu()\n                                        }\n                                    })}\n                                />\n                            )\n                        }}\n                    </Autocomplete>\n                    <Heading size={500} marginTop=\"default\">Allocation</Heading>\n                    <Combobox\n                        name=\"allocation\"\n                        openOnFocus\n                        width={400}\n                        items={[\"name\"]}\n                        onChange={selected => this.setState({ allocation: selected })}\n                        placeholder=\"Select a Cat\"\n                    />\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                        <Checkbox\n                            name=\"updates\"\n                            checked={this.state.update}\n                            onChange={e => this.setState({ update: e.target.checked })}\n                        />\n                        <Heading size={500} marginTop={0} marginLeft={10} >Keep me updated on Free Spirits news</Heading>\n                    </div>\n                    <StripeCheckout\n                        amount={this.state.gift}\n                        name=\"Free Spirits\"\n                        description={`Donate to save wild cats`}\n                        image={''}\n                        stripeKey=\"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\"\n                        currency=\"AUD\"\n                        email={this.state.email}\n                        token={res => this.onToken(res, createOrder)}\n                    >\n                        <Button height={50} marginTop={30} appearance=\"primary\" intent=\"success\" >Complete this Transaction</Button>\n                    </StripeCheckout>\n                </FormField>\n\n\n            </Styles >\n        );\n    }\n}\n\nexport default DonationForm;\n"]},"metadata":{},"sourceType":"module"}