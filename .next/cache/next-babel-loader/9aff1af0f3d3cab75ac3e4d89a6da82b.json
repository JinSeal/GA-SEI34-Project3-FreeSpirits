{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jinz/Projects/project3/frontend/components/DonationForm.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_CATS_QUERY{\\n    allCats{\\n      id\\n      name\\n      image\\n      iucnStatus\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from 'evergreen-ui';\nimport styled from 'styled-components';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Query } from 'react-apollo';\nimport _ from 'underscore';\nvar Styles = styled.div.withConfig({\n  displayName: \"DonationForm__Styles\",\n  componentId: \"sc-1a2kw3r-0\"\n})([\"background-color:white;padding:2rem 5rem;\"]);\nvar ALL_CATS_QUERY = gql(_templateObject()); // const CREATE_ORDER_MUTATION = gql`\n//   mutation createOrder($token: String!) {\n//     createOrder(token: $token) {\n//       id\n//       charge\n//       total\n//       items {\n//         id\n//         title\n//       }\n//     }\n//   }\n// `;\n\nvar DonationForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DonationForm, _Component);\n\n  function DonationForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DonationForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DonationForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      email: '',\n      updates: false,\n      gift: Number(_this.props.amount) || 0,\n      allocation: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveToState\", function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToken\", function _callee(res, createOrder) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              NProgress.start();\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(createDonation({\n                variables: {\n                  token: res.id\n                }\n              })[\"catch\"](function (err) {\n                alert(err.message);\n              }));\n\n            case 3:\n              Router.push({\n                pathname: '/thankyou'\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(DonationForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Query, {\n        query: ALL_CATS_QUERY,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, function (_ref) {\n        var _jsx;\n\n        var data = _ref.data;\n\n        var catsName = _.pluck(data.allCats, \"name\");\n\n        var cat = _.where(data.allCats, {\n          name: _this2.state.allocation\n        })[0];\n\n        var image = cat ? cat.image : \"static/image/stripe.jpg\";\n        return __jsx(Styles, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, __jsx(FormField, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, __jsx(Heading, {\n          size: 500,\n          marginTop: \"default\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, \"Email *\"), __jsx(TextInputField, {\n          name: \"email\",\n          isInvalid: false,\n          inputWidth: 400,\n          placeholder: \"Enter your email\",\n          onChange: function onChange(email) {\n            _this2.setState({\n              email: email\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }), __jsx(Heading, {\n          size: 500,\n          marginTop: \"default\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, \"Gift Amount *\"), __jsx(Autocomplete, (_jsx = {\n          height: 50,\n          onChange: _this2.saveToState,\n          items: [25.00, 50.00, 100.00, 200.00, 500.00]\n        }, _defineProperty(_jsx, \"onChange\", function onChange(changedItem) {\n          return _this2.setState({\n            gift: changedItem\n          });\n        }), _defineProperty(_jsx, \"value\", _this2.state.gift), _defineProperty(_jsx, \"__source\", {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        }), _defineProperty(_jsx, \"__self\", this), _jsx), function (props) {\n          var getInputProps = props.getInputProps,\n              getRef = props.getRef,\n              inputValue = props.inputValue,\n              openMenu = props.openMenu;\n          return __jsx(TextInput, _extends({\n            placeholder: \"Choose or Enter an Amount\",\n            width: 400,\n            value: inputValue,\n            innerRef: getRef,\n            label: \"Gift Amount\"\n          }, getInputProps({\n            onFocus: function onFocus() {\n              openMenu();\n            }\n          }), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }));\n        }), __jsx(Heading, {\n          size: 500,\n          marginTop: \"default\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, \"Allocation\"), __jsx(Combobox, {\n          name: \"allocation\",\n          openOnFocus: true,\n          width: 400,\n          items: [].concat(_toConsumableArray(catsName), [\"All Cats\"]),\n          onChange: function onChange(selected) {\n            return _this2.setState({\n              allocation: selected\n            });\n          },\n          placeholder: \"Select a Cat\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }), __jsx(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, __jsx(Checkbox, {\n          name: \"updates\",\n          checked: _this2.state.update,\n          onChange: function onChange(e) {\n            return _this2.setState({\n              update: e.target.checked\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }), __jsx(Heading, {\n          size: 500,\n          marginTop: 0,\n          marginLeft: 10,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, \"Keep me updated on Free Spirits news\")), __jsx(StripeCheckout, {\n          amount: _this2.state.gift * 100,\n          name: \"Free Spirits\",\n          description: \"Donate to save wild cats\",\n          image: image,\n          stripeKey: \"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\",\n          currency: \"AUD\",\n          email: _this2.state.email,\n          token: function token(res) {\n            return _this2.onToken(res, createOrder);\n          },\n          bitcoin: true,\n          allowRememberMe: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, __jsx(Button, {\n          height: 50,\n          marginTop: 30,\n          appearance: \"primary\",\n          intent: \"success\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \"Complete this Transaction\"))));\n      });\n    }\n  }]);\n\n  return DonationForm;\n}(Component);\n\nexport default DonationForm;","map":{"version":3,"sources":["/Users/jinz/Projects/project3/frontend/components/DonationForm.js"],"names":["React","Component","gql","FormField","TextInputField","Autocomplete","TextInput","Checkbox","Button","Heading","Combobox","styled","StripeCheckout","Query","_","Styles","div","ALL_CATS_QUERY","DonationForm","email","updates","gift","Number","props","amount","allocation","e","setState","target","name","value","res","createOrder","NProgress","start","createDonation","variables","token","id","err","alert","message","Router","push","pathname","data","catsName","pluck","allCats","cat","where","state","image","saveToState","changedItem","getInputProps","getRef","inputValue","openMenu","onFocus","selected","display","alignItems","update","checked","onToken"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { FormField, TextInputField, Autocomplete, TextInput, Checkbox, Button, Heading, Combobox } from 'evergreen-ui';\nimport styled from 'styled-components';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Query } from 'react-apollo';\nimport _ from 'underscore';\n\nconst Styles = styled.div`\n    background-color: white;\n    padding: 2rem 5rem;\n`;\n\n\nconst ALL_CATS_QUERY = gql`\n  query ALL_CATS_QUERY{\n    allCats{\n      id\n      name\n      image\n      iucnStatus\n    }\n  }\n`;\n\n// const CREATE_ORDER_MUTATION = gql`\n//   mutation createOrder($token: String!) {\n//     createOrder(token: $token) {\n//       id\n//       charge\n//       total\n//       items {\n//         id\n//         title\n//       }\n//     }\n//   }\n// `;\n\nclass DonationForm extends Component {\n    state = {\n        email: '',\n        updates: false,\n        gift: Number(this.props.amount) || 0,\n        allocation: \"\"\n    };\n\n\n    saveToState = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n\n    onToken = async (res, createOrder) => {\n        NProgress.start();\n        await createDonation({\n            variables: {\n                token: res.id,\n            },\n        }).catch(err => {\n            alert(err.message);\n        });\n        Router.push({\n            pathname: '/thankyou',\n        });\n    };\n\n    render() {\n\n\n        return (\n            <Query query={ALL_CATS_QUERY}>\n                {({ data }) => {\n                    const catsName = _.pluck(data.allCats, \"name\")\n                    let cat = _.where(data.allCats, { name: this.state.allocation })[0]\n                    let image = cat ? cat.image : \"static/image/stripe.jpg\"\n\n                    return (\n                        <Styles>\n                            <FormField>\n                                <Heading size={500} marginTop=\"default\">Email *</Heading>\n                                <TextInputField\n                                    name=\"email\"\n                                    isInvalid={false}\n                                    inputWidth={400}\n                                    placeholder=\"Enter your email\"\n                                    onChange={email => { this.setState({ email: email }) }}\n                                />\n                                <Heading size={500} marginTop=\"default\">Gift Amount *</Heading>\n                                <Autocomplete height={50}\n                                    onChange={this.saveToState}\n                                    items={[25.00, 50.00, 100.00, 200.00, 500.00]}\n                                    onChange={changedItem => this.setState({ gift: changedItem })}\n                                    value={this.state.gift}\n                                >\n                                    {(props) => {\n                                        const { getInputProps, getRef, inputValue, openMenu } = props\n                                        return (\n                                            <TextInput\n                                                placeholder=\"Choose or Enter an Amount\"\n                                                width={400}\n                                                value={inputValue}\n                                                innerRef={getRef}\n                                                label=\"Gift Amount\"\n                                                {...getInputProps({\n                                                    onFocus: () => {\n                                                        openMenu()\n                                                    }\n                                                })}\n                                            />\n                                        )\n                                    }}\n                                </Autocomplete>\n                                <Heading size={500} marginTop=\"default\">Allocation</Heading>\n                                <Combobox\n                                    name=\"allocation\"\n                                    openOnFocus\n                                    width={400}\n                                    items={[...catsName, \"All Cats\"]}\n                                    onChange={selected => this.setState({ allocation: selected })}\n                                    placeholder=\"Select a Cat\"\n                                />\n                                <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                                    <Checkbox\n                                        name=\"updates\"\n                                        checked={this.state.update}\n                                        onChange={e => this.setState({ update: e.target.checked })}\n                                    />\n                                    <Heading size={500} marginTop={0} marginLeft={10} >Keep me updated on Free Spirits news</Heading>\n                                </div>\n                                <StripeCheckout\n                                    amount={this.state.gift * 100}\n                                    name=\"Free Spirits\"\n                                    description={`Donate to save wild cats`}\n                                    image={image}\n                                    stripeKey=\"pk_test_KiZyYKiQtlmrqhtoGEbkdtuR00es4lCEgx\"\n                                    currency=\"AUD\"\n                                    email={this.state.email}\n                                    token={res =>\n                                        this.onToken(res, createOrder)\n                                    }\n                                    bitcoin={true}\n                                    allowRememberMe={true}\n                                >\n                                    <Button height={50} marginTop={30} appearance=\"primary\" intent=\"success\" >Complete this Transaction</Button>\n                                </StripeCheckout>\n                            </FormField>\n\n\n                        </Styles >\n                    )\n                }}\n            </Query>\n\n        );\n    }\n}\n\nexport default DonationForm;\n"]},"metadata":{},"sourceType":"module"}